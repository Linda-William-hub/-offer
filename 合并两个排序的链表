/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        ListNode * p = pHead1;
        ListNode * q = pHead2;
        ListNode * t = NULL;
        ListNode * pRoot = NULL;

        //一个链表合并到另一个链表中去  
        if (pHead1 == NULL)
          return pHead2; 
        else if (pHead2 == NULL)
          return pHead1;
        //找到第一个小的，t指向它
        if (p->val <= q->val)
        {
          t = p;
          p = p->next; 
        } 
        else
        {
          t = q;
          q = q->next;			
        }
        //保存首结点
        pRoot = t;
        //开始比较两个指针的值
        //一个一个append到t链表上(这种方法实现简单一点，也可以循环把某一段放上去，需要多一个指针，减少向t链表append)
        while (p != NULL && q != NULL)
        {
          if (p->val <= q->val)
          {
            t->next = p;
            p = p->next;
          }
          else
          {
            t->next = q;
            q = q->next;				
          }
          t = t->next;
        }
        //当某个链表比较结束了，要把留一个链表的剩余部分放到t链表尾
        if (p != NULL)
            t->next = p;
        else
            t->next = q;

        return pRoot;
    }
};
