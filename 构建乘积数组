//因为不能用除法
//使用前缀 和 后缀进行组合

class Solution {
public:
  //前缀
	void Prefix(const vector<int> &A, vector<int> & prefix)
	{
		prefix[0] = 1;
		for (int i = 0, j = 1; i < A.size(); i++, j++)
		{
			prefix[j] = A[i] * prefix[j - 1];
		}
		return;	
	}
	
  //后缀
	void Postfix(const vector<int> &A, vector<int> & postfix)
	{
		postfix[0] = 1;
		for (int i = A.size() - 1, j = 1; i >= 0; i--, j++)
		{
			postfix[j] = A[i] * postfix[j - 1];
		}
		return;	
	}
	
  vector<int> multiply(const vector<int>& A) 
  {
  	vector<int> B;
  	int n = A.size();
  	if (n <= 1)
  		return B;
  	vector<int> prefix(n + 1, 0);
  	vector<int> postfix(n + 1, 0);
  	Prefix(A, prefix);
  	Postfix(A, postfix);
    for (int i = 1; i <= n; i++)
    {
      B.push_back(prefix[i - 1] * postfix[n - i]);
    }
    return B;
  }
};
